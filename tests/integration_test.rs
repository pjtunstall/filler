use std::io::Write;
use std::process::{Command, Stdio};

#[test]
fn test_run_with_piped_input() {
    let input = r#"$$$ exec p1 : [solution/maximilian]
Anfield 40 30:
 0123456789012345678901234567890123456789
000 ........................................
001 ........................................
002 ........................................
003 ....@...................................
004 ........................................
005 ........................................
006 ........................................
007 ........................................
008 ........................................
009 ........................................
010 ........................................
011 ........................................
012 ........................................
013 ........................................
014 ........................................
015 ........................................
016 ........................................
017 ........................................
018 ........................................
019 ........................................
020 ........................................
021 ........................................
022 ........................................
023 ........................................
024 ........................................
025 ........................................
026 ................................$.......
027 ........................................
028 ........................................
029 ........................................
Piece 2 1:
OO
Anfield 40 30:
 0123456789012345678901234567890123456789
000 ........................................
001 ........................................
002 ........................................
003 ....aa..................................
004 ........................................
005 ........................................
006 ........................................
007 ........................................
008 ........................................
009 ........................................
010 ........................................
011 ........................................
012 ........................................
013 ........................................
014 ........................................
015 ........................................
016 ........................................
017 ........................................
018 ........................................
019 ........................................
020 ........................................
021 ........................................
022 ........................................
023 ........................................
024 ........................................
025 ........................................
026 ................................ss......
027 ..................................s.....
028 ........................................
029 ........................................
Piece 1 2:
O
O
"#;

    let mut child = Command::new("cargo")
        .args(&["run", "--bin", "maximilian"])
        .stdin(Stdio::piped())
        .stdout(Stdio::piped())
        .spawn()
        .expect("Failed to spawn child process");

    let stdin = child.stdin.as_mut().expect("Failed to open stdin");
    stdin
        .write_all(input.as_bytes())
        .expect("Failed to write to stdin");
    stdin.flush().expect("Failed to flush stdin");

    // Close stdin by taking ownership and dropping it.
    child.stdin.take();

    // Wait for the process to complete and capture output.
    let output = child.wait_with_output().expect("Failed to read stdout");

    let output_str = String::from_utf8(output.stdout).expect("Invalid UTF-8");

    for line in output_str.lines() {
        let parts: Vec<&str> = line.trim().split_whitespace().collect();
        assert_eq!(
            parts.len(),
            2,
            "Each move should have exactly 2 integers: {}",
            line
        );

        parts[0]
            .parse::<i32>()
            .expect("X coordinate should be integer");
        parts[1]
            .parse::<i32>()
            .expect("Y coordinate should be integer");
    }

    println!("Output moves:\n{}", output_str);
}
