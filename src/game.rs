use crate::{anfield::Anfield, errors::GameError, parse, piece::Piece, strategy::Strategy};

pub struct Game<S: Strategy> {
    pub anfield: Anfield,
    pub strategy: S,
    lines: Box<dyn Iterator<Item = Result<String, std::io::Error>>>,
    initializing: bool,
}

impl<S: Strategy> Game<S> {
    pub fn new<I>(anfield: Anfield, strategy: S, lines: I) -> Self
    where
        I: Iterator<Item = Result<String, std::io::Error>> + 'static,
    {
        Game {
            anfield,
            strategy,
            lines: Box::new(lines),
            initializing: true,
        }
    }
}

impl<S: Strategy> Iterator for Game<S> {
    type Item = Result<String, GameError>;

    fn next(&mut self) -> Option<Self::Item> {
        let anfield_header = match parse::read_line(&mut self.lines, "anfield header") {
            Ok(header) => header,
            Err(e) => {
                if is_eof_error(&e) {
                    return None;
                }
                return Some(Err(map_io_error(e, "anfield header")));
            }
        };

        let result = (|| {
            let [width, height] = parse::get_width_and_height(anfield_header.clone())
                .map_err(|_| GameError::ParseAnfieldDimensions(anfield_header.clone()))?;

            if self.initializing {
                self.anfield.set_dimensions(width, height);
                self.initializing = false;
            } else {
                if width != self.anfield.width {
                    let msg = format!("Anfield width has changed: {}", anfield_header);
                    return Err(GameError::ParseAnfieldDimensions(msg));
                }
                if height != self.anfield.height {
                    let msg = format!("Anfield height has changed: {}", anfield_header);
                    return Err(GameError::ParseAnfieldDimensions(msg));
                }
            }

            self.anfield
                .parse(&mut self.lines)
                .map_err(|e| GameError::ParseAnfieldBody(e.to_string()))?;

            let piece_header = parse::read_line(&mut self.lines, "piece header")
                .map_err(|e| map_io_error(e, "piece header"))?;

            let [width, height] = parse::get_width_and_height(piece_header.clone())
                .map_err(|_| GameError::ParsePieceDimensions(piece_header))?;

            let piece = Piece::new(&mut self.lines, width, height)
                .map_err(|e| GameError::ParsePieceBody(e.to_string()))?;

            Ok(self.play(&piece))
        })();

        Some(result)
    }
}

fn is_eof_error(error: &std::io::Error) -> bool {
    error.kind() == std::io::ErrorKind::UnexpectedEof
}

impl<S: Strategy> Game<S> {
    pub fn play(&mut self, piece: &Piece) -> String {
        let [x, y] = self.strategy.choose_move(&self.anfield, piece);
        format!("{} {}", x, y)
    }
}

fn map_io_error(err: std::io::Error, context: &'static str) -> GameError {
    if err.kind() == std::io::ErrorKind::UnexpectedEof {
        GameError::UnexpectedEof(context)
    } else {
        GameError::Io(err)
    }
}

#[cfg(test)]
mod tests {
    use crate::{anfield::Anfield, game::Game, strategy::attack::Attack};
    use std::io::{BufRead, BufReader};

    fn make_lines(input: &str) -> impl Iterator<Item = std::io::Result<String>> {
        BufReader::new(input.as_bytes()).lines()
    }

    #[test]
    fn test_one_turn() {
        let input = r#"Anfield 40 30:
    0123456789012345678901234567890123456789
000 ........................................
001 ........................................
002 ........................................
003 ....@...................................
004 ........................................
005 ........................................
006 ........................................
007 ........................................
008 ........................................
009 ........................................
010 ........................................
011 ........................................
012 ........................................
013 ........................................
014 ........................................
015 ........................................
016 ........................................
017 ........................................
018 ........................................
019 ........................................
020 ........................................
021 ........................................
022 ........................................
023 ........................................
024 ........................................
025 ........................................
026 ................................$.......
027 ........................................
028 ........................................
029 ........................................
Piece 8 2:
....O...
....O...
"#;

        let lines = make_lines(input);
        let anfield = Anfield::new(1u8);
        let strategy = Attack;
        let mut game = Game::new(anfield, strategy, lines);

        let result = game.next();
        assert!(result.is_some(), "Expected Some from game.next()");
        let result = result.unwrap();
        assert!(result.is_ok(), "Expected Ok, got Err: {:?}", result);
        let mv = result.unwrap();
        println!("Move: {mv}");
        assert!(mv.contains(' '), "Expected move format like 'x y'");
    }

    #[test]
    fn test_two_turns() {
        let input = r#"Anfield 40 30:
    0123456789012345678901234567890123456789
000 ........................................
001 ........................................
002 ........................................
003 ....@...................................
004 ........................................
005 ........................................
006 ........................................
007 ........................................
008 ........................................
009 ........................................
010 ........................................
011 ........................................
012 ........................................
013 ........................................
014 ........................................
015 ........................................
016 ........................................
017 ........................................
018 ........................................
019 ........................................
020 ........................................
021 ........................................
022 ........................................
023 ........................................
024 ........................................
025 ........................................
026 ................................$.......
027 ........................................
028 ........................................
029 ........................................
Piece 2 1:
OO
Anfield 40 30:
    0123456789012345678901234567890123456789
000 ........................................
001 ........................................
002 ........................................
003 ....aa..................................
004 ........................................
005 ........................................
006 ........................................
007 ........................................
008 ........................................
009 ........................................
010 ........................................
011 ........................................
012 ........................................
013 ........................................
014 ........................................
015 ........................................
016 ........................................
017 ........................................
018 ........................................
019 ........................................
020 ........................................
021 ........................................
022 ........................................
023 ........................................
024 ........................................
025 ........................................
026 ................................ss......
027 ..................................s.....
028 ........................................
029 ........................................
Piece 1 2:
O
O
"#;

        let lines = make_lines(input);
        let anfield = Anfield::new(1u8);
        let strategy = Attack;
        let mut game = Game::new(anfield, strategy, lines);

        let result = game.next();
        assert!(result.is_some(), "Expected Some from game.next()");
        let result = result.unwrap();
        assert!(result.is_ok(), "Expected Ok, got Err: {:?}", result);
        let mv = result.unwrap();
        println!("Move: {mv}");
        assert!(mv.contains(' '), "Expected move format like 'x y'");

        let result = game.next();
        assert!(result.is_some(), "Expected Some from game.next()");
        let result = result.unwrap();
        assert!(result.is_ok(), "Expected Ok, got Err: {:?}", result);
        let mv = result.unwrap();
        println!("Move: {mv}");
        assert!(mv.contains(' '), "Expected move format like 'x y'");
    }
}
